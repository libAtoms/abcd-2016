Index: ase/calculators/castep.py
===================================================================
--- ase/calculators/castep.py	(revision 4490)
+++ ase/calculators/castep.py	(working copy)
@@ -1585,8 +1585,8 @@
             sys.stdout.write(doc)
             sys.stdout.flush()
 
-            raise Exception('create_castep_keywords: Could not process %s'
-                % option)
+            #raise Exception('create_castep_keywords: Could not process %s'
+            #    % option)
 
     # write classes out
     for suffix in suffixes:
Index: ase/db/cli.py
===================================================================
--- ase/db/cli.py	(revision 4490)
+++ ase/db/cli.py	(working copy)
@@ -1,15 +1,18 @@
 from __future__ import print_function
 import collections
 import optparse
+import os
 import sys
 from random import randint
 
+import numpy as np
+
 import ase.io
 from ase.db import connect
 from ase.db.core import convert_str_to_float_or_str
 from ase.db.summary import Summary
 from ase.db.table import Table, all_columns
-from ase.calculators.calculator import get_calculator
+from ase.calculators.calculator import get_calculator, all_properties
 from ase.utils import plural
 
 try:
@@ -50,8 +53,16 @@
         help='Long description of selected row')
     add('-i', '--insert-into', metavar='db-name',
         help='Insert selected rows into another database.')
-    add('-a', '--add-from-file', metavar='[type:]filename',
+    add('-a', '--add-from-file', metavar='[type:]filename...',
         help='Add results from file.')
+    add('-o', '--store-original-file', action='store_true',
+        help='When adding files with --add-from-file, include original filename and full contents')    
+    add('-x', '--extract-original-file', action='store_true',
+        help='Extract an original file stored with -o/--store-original-file')
+    add('-W', '--write-to-file', metavar='[type:]filename',
+        help='Write selected rows to file(s). Include format string for multiple files, e.g. file_%03d.xyz')
+    add('-A', '--all-data', action='store_true', default=False,
+        help="Include atoms.info and atoms.arrays dictionaries in key_value_pairs and data")
     add('-k', '--add-key-value-pairs', metavar='key1=val1,key2=val2,...',
         help='Add key-value pairs to selected rows.  Values must be numbers '
         'or strings and keys must follow the same rules as keywords.')
@@ -145,7 +156,16 @@
             atoms = get_calculator(calculator_name)(filename).get_atoms()
         else:
             atoms = ase.io.read(filename)
-        con.write(atoms, key_value_pairs=add_key_value_pairs)
+            if isinstance(atoms, list):
+                raise RuntimeEror('multi-config file formats not yet supported')
+        data = {}            
+        if opts.store_original_file:
+            add_key_value_pairs['original_file_name'] = filename
+            with open(filename) as f:
+                original_file_contents = f.read()
+            data['original_file_contents'] = original_file_contents
+        con.write(atoms, key_value_pairs=add_key_value_pairs, data=data,
+                  add_from_info_and_arrays=opts.all_data)
         out('Added {0} from {1}'.format(atoms.get_chemical_formula(),
                                         filename))
         return
@@ -183,6 +203,54 @@
         out('Inserted %s' % plural(nrows, 'row'))
         return
 
+    if opts.write_to_file:
+        filename = opts.write_to_file
+        if ':' in filename:
+            format, filename = filename.split(':')
+        else:
+            format = None
+        nrows = 0
+        list_of_atoms = []
+        for row in con.select(query):
+            atoms = row.toatoms(add_to_info_and_arrays=opts.all_data)
+            if 'original_file_contents' in atoms.info:
+                del atoms.info['original_file_contents']
+            list_of_atoms.append(atoms)
+            nrows += 1
+        if '%' in filename:
+            for i, atoms in enumerate(list_of_atoms):
+                ase.io.write(filename % i, atoms, format=format)
+        else:
+            if filename == '-':
+                if format is None: format = 'extxyz'
+                filename = sys.stdout
+            ase.io.write(filename, list_of_atoms, format=format)
+        out('Wrote %d rows.' % len(list_of_atoms))
+        return
+
+    if opts.extract_original_file:
+        nwrite = 0
+        nrow = 0
+        for row in con.select(query):
+            nrow += 1
+            if ('original_file_name' not in row.key_value_pairs or
+                'original_file_contents' not in row.data):
+                out('no original file stored for row id=%d' % row.id)
+                continue
+            original_file_name = row.key_value_pairs['original_file_name']
+            # restore to current working directory
+            original_file_name = os.path.basename(original_file_name)
+            if os.path.exists(original_file_name):
+                out('original_file_name %s already exists in current ' %
+                     original_file_name + 'working directory, skipping write')
+                continue
+            out('Writing %s' % original_file_name)            
+            with open(original_file_name, 'w') as original_file:
+                original_file.write(row.data['original_file_contents'])
+            nwrite += 1            
+        out('Extracted original output files for %d/%d selected rows' % (nwrite, nrow))
+        return
+
     if add_key_value_pairs or delete_keys:
         ids = [dct['id'] for dct in con.select(query)]
         m, n = con.update(ids, delete_keys, **add_key_value_pairs)
Index: ase/db/core.py
===================================================================
--- ase/db/core.py	(revision 4490)
+++ ase/db/core.py	(working copy)
@@ -186,7 +186,8 @@
             
     @parallel
     @lock
-    def write(self, atoms, key_value_pairs={}, data={}, **kwargs):
+    def write(self, atoms, key_value_pairs={}, data={},
+              add_from_info_and_arrays=False, **kwargs):
         """Write atoms to database with key-value pairs.
         
         atoms: Atoms object
@@ -197,6 +198,9 @@
             Dictionary of key-value pairs.  Values must be strings or numbers.
         data: dict
             Extra stuff (not for searching).
+        add_from_info_and_arrays : bool
+            If True, add all information from atoms.info and atoms.arrays
+            to key_value_pairs and data
             
         Key-value pairs can also be set using keyword arguments::
             
@@ -210,8 +214,31 @@
         
         kvp = dict(key_value_pairs)  # modify a copy
         kvp.update(kwargs)
+
+        dat = dict(data) # modify a copy
+
+        if add_from_info_and_arrays:
+            skip_keys = ['calculator', 'id', 'unique_id']
+            for (key, value) in atoms.info.items():
+                key = key.lower()
+                if key in skip_keys:
+                    continue
+                if (isinstance(value, int)   or isinstance(value, basestring) or
+                    isinstance(value, float) or isinstance(value, bool)):
+                    # scalar key/value pairs
+                    kvp[key] = value
+                else:
+                    # more complicated data structures
+                    dat[key] = value
+
+            skip_arrays = ['numbers', 'positions', 'species']
+            for (key, value) in atoms.arrays.items():
+                if key in skip_arrays:
+                    continue
+                key = key.lower()
+                dat[key] = value
         
-        id = self._write(atoms, kvp, data)
+        id = self._write(atoms, kvp, dat)
         return id
         
     def _write(self, atoms, key_value_pairs, data):
Index: ase/db/row.py
===================================================================
--- ase/db/row.py	(revision 4490)
+++ ase/db/row.py	(working copy)
@@ -181,7 +181,8 @@
         return charges.sum()
 
     def toatoms(self, attach_calculator=False,
-                add_additional_information=False):
+                add_additional_information=False,
+                add_to_info_and_arrays=False):
         """Create Atoms object."""
         atoms = Atoms(self.numbers,
                       self.positions,
@@ -206,6 +207,9 @@
                 atoms.calc = SinglePointCalculator(atoms, **results)
                 atoms.calc.name = self.calculator
 
+        if add_additional_information and add_to_info_and_arrays:
+            raise ValueErorr('add_additional_informatio and add_to_info_and_arrays are mutually exclusive')
+
         if add_additional_information:
             atoms.info = {}
             atoms.info['unique_id'] = self.unique_id
@@ -214,5 +218,19 @@
             data = self.get('data')
             if data:
                 atoms.info['data'] = data
-                    
+        elif add_to_info_and_arrays:
+            atoms.info['unique_id'] = self.unique_id
+            if self._keys:
+                atoms.info.update(self.key_value_pairs)
+            data = self.get('data')
+            if data:
+                for (key, value) in data.items():
+                    key = str(key) # avoid unicode strings
+                    value = np.array(value)
+                    if value.dtype.kind == 'U':
+                        value = value.astype(str)
+                    try:
+                        atoms.new_array(key, value)
+                    except (TypeError, ValueError):
+                        atoms.info[key] = value
         return atoms
Index: ase/io/extxyz.py
===================================================================
--- ase/io/extxyz.py	(revision 4490)
+++ ase/io/extxyz.py	(working copy)
@@ -342,9 +342,11 @@
         for key in atoms.info.keys():
             if key in all_properties:
                 results[key] = atoms.info[key]
+                del atoms.info[key]
         for key in atoms.arrays.keys():
             if key in all_properties:
                 results[key] = atoms.arrays[key]
+                del atoms.arrays[key]
         if results != {}:
             calculator = SinglePointCalculator(atoms, **results)
             atoms.set_calculator(calculator)
